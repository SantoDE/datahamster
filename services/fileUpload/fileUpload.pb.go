// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services/fileUpload/fileUpload.proto

/*
Package fileUpload is a generated protocol buffer package.

It is generated from these files:
	services/fileUpload/fileUpload.proto

It has these top-level messages:
	FileUploadRequest
	FileUploadResponse
*/
package fileUpload

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FileUploadRequest struct {
	Id      int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *FileUploadRequest) Reset()                    { *m = FileUploadRequest{} }
func (m *FileUploadRequest) String() string            { return proto.CompactTextString(m) }
func (*FileUploadRequest) ProtoMessage()               {}
func (*FileUploadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FileUploadRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FileUploadRequest) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type FileUploadResponse struct {
	Keyword string `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
}

func (m *FileUploadResponse) Reset()                    { *m = FileUploadResponse{} }
func (m *FileUploadResponse) String() string            { return proto.CompactTextString(m) }
func (*FileUploadResponse) ProtoMessage()               {}
func (*FileUploadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FileUploadResponse) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func init() {
	proto.RegisterType((*FileUploadRequest)(nil), "fileUpload.FileUploadRequest")
	proto.RegisterType((*FileUploadResponse)(nil), "fileUpload.FileUploadResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FileUpload service

type FileUploadClient interface {
	// Get all Customers with filter - A server-to-client streaming RPC.
	UploadFile(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*FileUploadResponse, error)
}

type fileUploadClient struct {
	cc *grpc.ClientConn
}

func NewFileUploadClient(cc *grpc.ClientConn) FileUploadClient {
	return &fileUploadClient{cc}
}

func (c *fileUploadClient) UploadFile(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*FileUploadResponse, error) {
	out := new(FileUploadResponse)
	err := grpc.Invoke(ctx, "/fileUpload.FileUpload/UploadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileUpload service

type FileUploadServer interface {
	// Get all Customers with filter - A server-to-client streaming RPC.
	UploadFile(context.Context, *FileUploadRequest) (*FileUploadResponse, error)
}

func RegisterFileUploadServer(s *grpc.Server, srv FileUploadServer) {
	s.RegisterService(&_FileUpload_serviceDesc, srv)
}

func _FileUpload_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileUploadServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileUpload.FileUpload/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileUploadServer).UploadFile(ctx, req.(*FileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileUpload_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fileUpload.FileUpload",
	HandlerType: (*FileUploadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _FileUpload_UploadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/fileUpload/fileUpload.proto",
}

func init() { proto.RegisterFile("services/fileUpload/fileUpload.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x4f, 0xcb, 0xcc, 0x49, 0x0d, 0x2d, 0xc8, 0xc9, 0x4f, 0x4c, 0x41,
	0x62, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x71, 0x21, 0x44, 0x94, 0x6c, 0xb9, 0x04, 0xdd,
	0xe0, 0xbc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0xa6, 0xcc, 0x14, 0x21, 0x09, 0x2e, 0xf6, 0xe2, 0xd2, 0xe4,
	0xe4, 0xd4, 0xe2, 0x62, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x8e, 0x20, 0x18, 0x57, 0x49, 0x8f, 0x4b,
	0x08, 0x59, 0x7b, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0x2a, 0x48, 0x7d, 0x76, 0x6a, 0x65, 0x79, 0x7e,
	0x11, 0xc4, 0x10, 0xce, 0x20, 0x18, 0xd7, 0x28, 0x9a, 0x8b, 0x0b, 0xa1, 0x5e, 0xc8, 0x97, 0x8b,
	0x0b, 0xc2, 0x02, 0x89, 0x09, 0xc9, 0xea, 0x21, 0xb9, 0x14, 0xc3, 0x51, 0x52, 0x72, 0xb8, 0xa4,
	0x21, 0x96, 0x2a, 0x31, 0x24, 0xb1, 0x81, 0xbd, 0x67, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x57,
	0x28, 0x87, 0x89, 0x06, 0x01, 0x00, 0x00,
}
